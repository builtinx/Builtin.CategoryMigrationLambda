version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.2.0
  aws-ecr: circleci/aws-ecr@8.2.1
  deploy-orb: builtinx/deploy-orb@0.0.15
  terraform: circleci/terraform@3.2.1
  slack: circleci/slack@4.1

pipeline-feature: &pipeline-feature
  context:
    - github-packages
    - write-github-packages
  filters:
    branches:
      ignore:
        - main
terraform-feature: &terraform-feature
  <<: *pipeline-feature
  context:
    - aws-develop
    - aws-services
    - boilerplate-terraform-secrets
    - boilerplate-develop
    - vault-secrets-develop
pipeline-test: &pipeline-test
  context:
    - aws-develop
    - aws-services
    - boilerplate-terraform-secrets
    - boilerplate-develop
    - github-packages
    - vault-secrets-develop
  filters:
    branches:
      only:
        - main
pipeline-staging: &pipeline-staging
  context:
    - aws-services
    - aws-staging
    - boilerplate-terraform-secrets
    - boilerplate-staging
    - vault-secrets-staging
    - circleci-secrets
  filters:
    branches:
      only:
        - main
pipeline-prod: &pipeline-prod
  context:
    - aws-prod
    - aws-services
    - boilerplate-terraform-secrets
    - boilerplate-prod
    - vault-secrets-prod
    - circleci-secrets
    - slack-secrets
  filters:
    branches:
      only:
        - main

tag-filter: &tag-filter
  filters:
    tags:
      only: /^(0|[1-9]\d*)\.(0|[1-9]\d*).*$/
    branches:
      ignore: /.*/

### You probably shouldn't edit below ###
commands:
  setup-make:
    description: "install make"
    steps:
      - run:
          command: |
            apt-get update
            apt-get -y install make

  setup-zip:
    description: "install zip"
    steps:
      - run:
          command: |
            apt-get update
            apt-get -y install zip

  setup-aws:
    description: "Sets up the AWS config and credentials"
    steps:
      - aws-cli/setup:
          profile-name: default
      - aws-cli/setup:
          aws-access-key-id: AWS_SERVICES_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SERVICES_SECRET_ACCESS_KEY
          profile-name: builtin-services
      - run:
          name: Fix aws config
          command: aws configure set profile.builtin-services.source_profile default

executors:
  base:
    docker:
      - image: cimg/base:stable
        user: root
  csharp:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:8.0

jobs:
  build:
    executor: base
    steps:
      - run: exit 1

  test-lambdas:
    executor: csharp
    steps:
      - add_ssh_keys
      - checkout
      - run: dotnet test CategoryMigrationLambda.sln

  run-terraform:
    parameters:
      workspace:
        description: "Terraform workspace to use. Workspace name should align with docker image tagging schema. Ex: workspace = develop, tags = develop-abc123,develop-latest"
        type: enum
        enum: ["develop", "staging", "prod"]
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - add_ssh_keys
      - checkout
      - terraform/fmt:
          path: ./terraform/workspace
      - terraform/validate:
          path: ./terraform/workspace
      - run:
          name: Import existing resources (if any)
          command: |
            cd ./terraform/workspace
            terraform init
            terraform workspace select << parameters.workspace >> || terraform workspace new << parameters.workspace >>
            
            # Try to import existing resources (ignore errors if they don't exist)
            echo "üîÑ Attempting to import existing resources..."
            
            # Import Lambda Function
            terraform import "module.category_migration_lambda.aws_lambda_function.this" "category-migration-lambda-<< parameters.workspace >>" 2>/dev/null || echo "‚ö†Ô∏è  Lambda Function not found or already imported"
            
            # Import CloudWatch Log Group
            terraform import "module.category_migration_lambda.aws_cloudwatch_log_group.logs" "/aws/lambda/category-migration-lambda-<< parameters.workspace >>" 2>/dev/null || echo "‚ö†Ô∏è  CloudWatch Log Group not found or already imported"
            
            # Import IAM Role
            terraform import "module.category_migration_lambda.aws_iam_role.lambda_role" "category-migration-lambda-<< parameters.workspace >>-role" 2>/dev/null || echo "‚ö†Ô∏è  IAM Role not found or already imported"
            
            echo "‚úÖ Resource import attempt completed"
          working_directory: .
      - terraform/plan:
          path: ./terraform/workspace
          workspace: << parameters.workspace >>

  apply-terraform:
    parameters:
      workspace:
        description: "Terraform workspace to use. Workspace name should align with docker image tagging schema. Ex: workspace = develop, tags = develop-abc123,develop-latest"
        type: enum
        enum: ["develop", "staging", "prod"]
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - add_ssh_keys
      - checkout
      - terraform/fmt:
          path: ./terraform/workspace
      - terraform/validate:
          path: ./terraform/workspace
      - terraform/plan:
          path: ./terraform/workspace
          workspace: << parameters.workspace >>
      - terraform/apply:
          path: ./terraform/workspace
          workspace: << parameters.workspace >>

  package-lambdas:
    executor: csharp
    steps:
      - add_ssh_keys
      - checkout
      - setup-zip
      - run: dotnet tool install --local --create-manifest-if-needed Amazon.Lambda.Tools
      # Package Lambda
      - run: dotnet lambda package -pl CategoryMigrationLambda -o lambda-packages/category-migration-lambda.zip
      - persist_to_workspace:
          root: lambda-packages
          paths:
            - category-migration-lambda.zip

  deploy-lambdas:
    description: "Uploads the Lambda packages into AWS"
    executor: base
    parameters:
      environment:
        type: enum
        enum: ["develop", "staging", "prod"]
    steps:
      - attach_workspace:
          at: lambda-packages
      - setup-aws
      - aws-cli/install
      # Deploy Lambda
      - run: aws lambda update-function-code --function-name category-migration-lambda-${CIRCLE_BRANCH} --zip-file fileb://lambda-packages/category-migration-lambda.zip
      - when:
          condition:
            equal: [prod, <<parameters.environment>>]
          steps:
            - deploy-orb/slack-notify-app-deploy:
                environment: Production

  continue-deploy:
    # To restrict a deploy to a certain approvers group, CircleCI recommends creating a
    # restricted context, and then placing it after an approval step.
    # This is a Noop step to go after the deploy approval to place the restricted context on
    # https://circleci.com/docs/contexts/#approve-jobs-that-use-restricted-contexts
    description: "Deploy approved"
    executor: base
    steps:
      - run:
          command: |
            echo "Proceeding with deploy after approval."

  cancel-redundant-builds:
    parameters:
      develop_deploy_job:
        description: Name of the job that deploys to develop, to determine if a build has been deployed yet.
        default: default
        type: string
      approval_job:
        description: Name of the job for approving deploy to staging or prod.
        default: default
        type: string
    executor: base
    steps:
      - checkout
      - run:
          name: cancel_redundant_builds
          command: |
            chmod +x scripts/cancel-redundant-builds.sh
            scripts/cancel-redundant-builds.sh <<parameters.develop_deploy_job>> <<parameters.approval_job>>

workflows:
  version: 2
  feature:
    jobs:
      - test-lambdas:
          <<: *pipeline-feature
      - run-terraform:
          <<: *terraform-feature
          name: terraform-plan-develop
          workspace: develop
          requires:
            - test-lambdas

  deploy-main:
    jobs:
      # 1. Run tests
      - test-lambdas:
          <<: *pipeline-test

      # 2. Develop deploy
      - run-terraform:
          <<: *pipeline-test
          name: terraform-plan-develop
          workspace: develop
          requires:
            - test-lambdas
      - apply-terraform:
          <<: *pipeline-test
          name: terraform-apply-develop
          workspace: develop
          requires:
            - terraform-plan-develop
      - package-lambdas:
          requires:
            - terraform-apply-develop
          <<: *pipeline-test
      - deploy-lambdas:
          name: deploy-lambdas-develop
          environment: develop
          requires:
            - package-lambdas
          <<: *pipeline-test

      # 3. Staging deploy upon approval
      - deploy-approval-staging:
          name: wait-staging
          type: approval
          <<: *pipeline-staging
          requires:
            - deploy-lambdas-develop
      - run-terraform:
          <<: *pipeline-staging
          name: terraform-plan-staging
          workspace: staging
          requires:
            - wait-staging
      - apply-terraform:
          <<: *pipeline-staging
          name: terraform-apply-staging
          workspace: staging
          requires:
            - terraform-plan-staging
      - deploy-lambdas:
          name: deploy-lambdas-staging
          environment: staging
          requires:
            - terraform-apply-staging
            - package-lambdas
          <<: *pipeline-staging
      - cancel-redundant-builds:
          name: cancel-redundant-builds-staging
          <<: *pipeline-staging
          develop_deploy_job: deploy-lambdas-develop
          approval_job: wait-staging
          requires:
            - deploy-lambdas-staging

      # 4. Production deploy upon approval
      - deploy-approval-prod:
          name: wait-prod
          type: approval
          <<: *pipeline-prod
          requires:
            - deploy-lambdas-staging
      - continue-deploy:
          name: prod-approved
          context:
            - aws-credentials
          requires:
            - wait-prod
          filters:
            branches:
              only:
                - main
      - run-terraform:
          <<: *pipeline-prod
          name: terraform-plan-prod
          workspace: prod
          requires:
            - prod-approved
      - apply-terraform:
          <<: *pipeline-prod
          name: terraform-apply-prod
          workspace: prod
          requires:
            - terraform-plan-prod
      - deploy-lambdas:
          name: deploy-lambdas-prod
          environment: prod
          requires:
            - terraform-apply-prod
            - package-lambdas
          <<: *pipeline-prod
      - cancel-redundant-builds:
          name: cancel-redundant-builds-prod
          <<: *pipeline-prod
          develop_deploy_job: deploy-lambdas-develop
          approval_job: wait-prod
          requires:
            - deploy-lambdas-prod

  tag:
    jobs:
      - test-lambdas:
          <<: *tag-filter
          context:
            - aws-credentials
          name: "Build and test"